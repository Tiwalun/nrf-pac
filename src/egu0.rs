#[doc = "Event Generator Unit 0"]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Egu0(pub *mut u8);
unsafe impl Send for Egu0 {}
unsafe impl Sync for Egu0 {}
impl Egu0 {
    #[doc = "Description collection\\[n\\]: Trigger n for triggering the corresponding TRIGGERED\\[n\\] event"]
    #[inline(always)]
    pub fn tasks_trigger(self, n: usize) -> crate::common::Reg<u32, crate::common::W> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.0.add(0usize + n * 4usize)) }
    }
    #[doc = "Description collection\\[n\\]: Event number n generated by triggering the corresponding TRIGGER\\[n\\] task"]
    #[inline(always)]
    pub fn events_triggered(self, n: usize) -> crate::common::Reg<u32, crate::common::RW> {
        assert!(n < 16usize);
        unsafe { crate::common::Reg::from_ptr(self.0.add(256usize + n * 4usize)) }
    }
    #[doc = "Enable or disable interrupt"]
    #[inline(always)]
    pub fn inten(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(768usize)) }
    }
    #[doc = "Enable interrupt"]
    #[inline(always)]
    pub fn intenset(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(772usize)) }
    }
    #[doc = "Disable interrupt"]
    #[inline(always)]
    pub fn intenclr(self) -> crate::common::Reg<regs::Inten, crate::common::RW> {
        unsafe { crate::common::Reg::from_ptr(self.0.add(776usize)) }
    }
}
pub mod regs;
